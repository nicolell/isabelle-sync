theory Submission
  imports Defs
begin

value "has_const TT"

fun sat :: "bexp' \<Rightarrow> assignment \<Rightarrow> bool"  where
  "sat TT _ = True" |
"sat FF _ = False" |
"sat (And e1 e2) a = (if (sat e1 a) \<and> (sat e2 a) then True else False)" |
"sat (V s) a = a s" |
"sat (Not e) a = (if (sat e a) then False else True)"

value "sat (And TT FF) (\<lambda>x. True)"
value "sat (Not (V x)) (\<lambda>x. True)"
value "sat (V x) (\<lambda>x. True)" 

fun models :: "bexp' \<Rightarrow> assignment set" where
  "models (V x) = {\<sigma>. \<sigma> x}" 
| "models TT = UNIV"
| "models FF = {} "|
"models (And e1 e2) = (models e1) \<inter> (models e2)" |
"models (Not e) = - (models e)"

theorem sat_iff_model: "sat \<phi> \<sigma> \<longleftrightarrow> \<sigma> \<in> models \<phi>"
  apply(induction rule: models.induct)
  apply(auto)
  done

fun s_and :: "bexp'\<Rightarrow> bexp'  \<Rightarrow> bexp'" where
"s_and TT TT = TT" |
"s_and TT FF = FF" |
"s_and FF TT = FF" |
"s_and FF FF = FF" |
"s_and TT e = e" |
"s_and FF e = FF" |
"s_and e TT = e" |
"s_and e FF = FF" |
"s_and e1 e2 = And e1 e2"

value "s_and TT FF"
value " sat (And e1 e2) s"

lemma sat_s_and [simp]:
"sat (s_and e1 e2) s = sat e1 s \<and> sat e2 s"

fun simplify_once :: "bexp' \<Rightarrow> bexp'" where
  "simplify_once (And TT e) = e" |
  "simplify_once (And FF e) = FF" |
  "simplify_once (Not TT) = FF" |
  "simplify_once (Not FF) = TT" |
  "simplify_once (And e1 e2) = And (simplify_once e1) (simplify_once e2)" |
  "simplify_once (Not e1) = Not (simplify_once e1)" |
  "simplify_once TT = TT" |
  "simplify_once FF = FF" |
  "simplify_once (V v) = V v"

fun simplify :: "bexp' \<Rightarrow> bexp'" where
  "simplify e = (let e' = simplify_once e in if e' = e then e else simplify e')"

value "simplify (And (Not FF) (V ''x''))"
value "simplify (And TT (V ''x''))"
value "simplify (And (Not FF) (V ''x'')) = V ''x''"

theorem simplify_simplified: "simplified (simplify \<phi>)"
  sorry

theorem simplify_models: "models (simplify \<phi>) = models \<phi>"
  sorry

end